# -*- coding: utf-8 -*-
"""Churn exploratória.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RGIYv2g5iBTxLa724SST1QAvBtu0pJBB
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
# %matplotlib inline
import seaborn as sns

df= pd.read_csv('churn.csv')
df.head()

# ele é mais completo, mostra o início e final do dataset , linhas e colunas ( é um resumo do outro)
display(df)

# Aqui eu consigo observar quais são as variáveis contínuas, categóricas e binárias

#categóricas: Surname, Geography,
#contínuas : CreditScore, Age, Tenure, Balance, NumOfProducts, EstimatedSalary, 
#Binárias : Gender, HasCrCard, IsActiveMember, Exited

#retirando as colunas que não serão úteis, #inplace é um df = df , um save nas variáveis
df.drop(columns = ['RowNumber','Surname','CustomerId'], axis = 1, inplace = True)
df.head(1)

# Ilustra todas as linhas colunas , seu tipo,  se há faltantes, 
df.info()

df.nunique(axis=0) # observa qual é a quantidade de valores únicos

df['Geography'].value_counts() # há apenas 3 países

df['NumOfProducts'].value_counts()

df['Gender'].value_counts() # te cerca de 1000 homens a mais

df['Exited'].value_counts()

df.describe().round(2) # Observando os valores máximos e mínimos.. médias e desvios

# coeficiente de variação
# a) cv < 10 ------------------> baixo
#b) 10 ≤ cv < 20------------> médio
#c) 20 ≤ cv < 30 -----------> alto
#d) cv ≥ 30-------------------> muito alto

#c) O desvio padrão é a medida de variabilidade mais conhecida, sendo amplamente utilizada;
#d) O erro padrão da média mede a variabilidade da média;
#e) Dentre as medidas de variabilidade estudadas, sugere-se que o coeficiente de variação seja utilizado para comparação da variabilidade entre diferentes conjuntos de dados, por se caracterizar como um número adimensional.

#Observando a tabela de correlação
correlacao = df.corr().round(2)
correlacao

# Um gráfico fala mais do que mil tabelas... # há colinearidade entre as variáveis? 
plt.figure(figsize = (13, 12))
sns.heatmap(correlacao, linewidths = 2, cbar= True, annot = True, fmt = '.2f')
plt.show()

# Análises gráficas

hist_age = sns.histplot(df['Age'], kde= False, bins = 20  )
hist_age.figure.set_size_inches(15, 5)
hist_age.set_title('Distribuição de Frequências', fontsize=20)
hist_age.set_xlabel('Idade', fontsize=16)
hist_age

fig, ax = plt.subplots(2, 2, figsize = (13, 11))

sns.countplot('Geography', hue = 'Exited', data = df, ax = ax[0][0])
sns.countplot('Gender', hue = 'Exited', data = df, ax = ax[0][1])
sns.countplot('NumOfProducts', hue = 'Exited', data = df, ax = ax[1][0])
sns.countplot('IsActiveMember', hue = 'Exited', data = df, ax = ax[1][1])

plt.tight_layout()
plt.show()

# alemanha observar porque eles saem tanto e se eles possuem mais o produto 0,2, ou 3 4
# a minha hipotese de maior quantidade de produtos estava errada, mas em contra partida, é necessário saber qual é o tipo do produto 
#mantém a pessoa mais fiel
ax =sns.countplot('Exited', hue = 'Geography', data = df)

fig, ax = plt.subplots(2, 2, figsize = (10, 8))

sns.boxplot(x = 'Exited', y = 'CreditScore', data = df, ax = ax[0][0])
sns.boxplot(x = 'Exited', y = 'Age', data = df, ax = ax[0][1])
sns.boxplot(x = 'Exited', y = 'Balance', data = df, ax = ax[1][0])
sns.boxplot(x = 'Exited', y = 'EstimatedSalary', data = df, ax = ax[1][1])
plt.tight_layout()

plt.show()

# não vejo nenhuma relação linear para isto
cred_age = sns.scatterplot(x = 'Age', y = 'CreditScore', data= df)
cred_age.figure.set_size_inches(10, 8)
cred_age.set_title('CreditScore x Age', fontsize=12)
cred_age.set_xlabel('Idade', fontsize=14)
cred_age.set_ylabel('Score de Crédito', fontsize=14)
cred_age

cred_age= sns.scatterplot(x = 'Age', y = 'EstimatedSalary', data= df)
cred_age.figure.set_size_inches(10, 8)
cred_age.set_title('Salário estimado  x Idade', fontsize=14)
cred_age.set_xlabel('Idade', fontsize=14)
cred_age.set_ylabel('Salário Estimado', fontsize=14)
cred_age

# Tratamento dos dados
df.Gender.unique()

# Transformando  as variáveis qualitatidas em binárias
genero = {'Male': 0 ,'Female': 1}
df['Gender'] = df['Gender'].map(genero) #Aplicando
df.head()

# Modificando os paises.
paises = {'France':0, 'Spain':1, 'Germany':2}
df.Geography = df.Geography.map(paises)
df.head()



#df['Age'].hist()